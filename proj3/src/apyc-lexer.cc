#line 2 "apyc-lexer.cc"

#line 4 "apyc-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[294] =
    {   0,
        0,    0,    0,    0,   88,   87,    3,    6,   87,   87,
       20,    4,   87,   23,   27,   19,   24,   25,   23,   23,
       26,   23,   23,   11,   13,   13,   26,   23,   26,   23,
       27,   85,   85,   85,   85,   85,   87,   27,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   27,    2,    2,    1,    2,    2,
        3,    6,   31,   20,   16,    0,    4,   86,   46,   43,
       19,   15,    0,   35,   40,   38,   39,   33,   34,   41,
       11,   11,   11,   14,   14,   14,   13,   13,   32,   36,
       28,   47,   30,   29,   37,   85,   85,   85,   20,   19,

       85,    5,    0,   45,   85,   70,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   57,   85,   58,
       59,   85,   85,   85,   63,   64,   85,   85,   85,   85,
       85,   85,   85,   85,   44,    2,    2,    1,    2,    2,
        0,    0,   16,   22,    0,   86,   15,   21,    0,   42,
       11,   14,   14,   12,   12,   12,   13,   85,   85,   85,
       48,   85,   85,   85,   85,   52,   72,   85,   85,   85,
       85,   85,   56,   85,   85,   85,   85,   85,   85,   62,
       85,   85,   85,   85,   82,   85,   85,   85,   22,    0,
        0,   21,    0,    0,   11,   14,   12,   13,   85,   61,

       68,   85,   85,   85,   85,   53,   54,   85,   74,   85,
       75,   85,   85,   85,   85,   85,   65,   85,   85,   85,
       85,   83,   85,    0,    0,    0,    0,    0,    0,   11,
       14,   12,   13,   55,   85,   49,   50,   85,   85,   85,
       85,   85,   85,   85,   85,   66,   81,   85,   69,   84,
       18,    0,   17,    0,   11,   14,   12,   13,   71,   85,
       73,   85,   77,   78,   79,   80,   60,   67,   11,   14,
       12,   13,   85,   76,   11,   14,   12,   13,   51,   11,
       14,   12,   13,   11,   14,   10,    7,   11,   14,    8,
       14,    9,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   16,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   16,   30,
       31,   32,    1,   33,   34,   34,   34,   34,   34,   35,
       36,   36,   36,   36,   36,   36,   36,   37,   38,   36,
       36,   39,   36,   40,   36,   36,   36,   41,   36,   36,
       12,   42,   13,   43,   36,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   36,   53,   54,   55,   56,
       57,   58,   36,   59,   60,   61,   62,   63,   64,   65,
       66,   36,   12,   67,   13,   33,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[306] =
    {   0,
        0,    0,   66,   72,  522,  523,  519,  523,  517,  488,
       65,    0,    0,  487,  486,   61,  523,  523,   63,  485,
      523,   49,   60,   89,   97,  495,  485,   52,  482,   54,
      523,    0,  468,  454,   81,  451,   85,  478,   37,  449,
       41,  459,   36,   74,  452,   79,  461,   85,   47,   88,
       93,  445,   92,  451,  471,  523,  146,  523,  498,  148,
      498,  523,  523,   96,  493,  152,    0,    0,  523,  523,
      129,  487,  154,  523,  523,  523,  523,  523,  466,  523,
      140,  153,  161,    0,  148,  169,    0,  473,  523,  523,
      523,  523,  523,  523,  523,    0,  441,  438,  164,  157,

      431,  523,  489,  523,  444,  430,  441,  444,  431,   51,
      148,  159,  430,  426,  427,  422,  425,    0,  423,    0,
        0,  425,  418,  417,    0,    0,  417,  424,  423,  413,
      407,  420,  410,  422,  523,  523,  217,  523,  466,  198,
      206,  208,  523,  192,  465,    0,  523,  211,  464,  523,
      206,  214,  447,    0,  217,  218,  439,  404,  415,  414,
        0,  413,  416,  399,  397,    0,    0,  408,  408,  407,
      408,  409,    0,  397,  389,  405,  392,  403,  395,    0,
      386,  389,  384,  381,    0,  388,  390,  386,  217,  235,
      435,  229,  239,  434,  241,  418,  227,  413,  387,    0,

        0,  375,  380,  372,  379,    0,    0,  372,    0,  375,
        0,  369,  383,  367,  378,  361,    0,  362,  374,  362,
      372,    0,  372,  245,  414,  414,  265,  412,  412,  269,
      395,  228,  386,    0,  351,    0,    0,  355,  321,  327,
      328,  318,  310,  303,  298,    0,    0,  289,    0,    0,
      523,  341,  523,  340,  277,  323,  251,  319,    0,  244,
        0,  239,    0,    0,    0,    0,    0,    0,  289,  285,
      253,  261,  237,    0,  297,  265,  255,  256,    0,  305,
      254,  256,  231,  313,  238,  321,    0,  330,  237,  338,
      233,    0,  523,  364,  369,  374,  140,  379,  381,  383,

      388,  393,  395,  400,  405
    } ;

static yyconst flex_int16_t yy_def[306] =
    {   0,
      293,    1,  294,  294,  293,  293,  293,  293,  293,  293,
      295,  296,  297,  293,  293,  298,  293,  293,  293,  293,
      293,  293,  293,  299,  299,   25,  293,  293,  293,  293,
      293,  300,  300,  300,  300,  300,  293,  293,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  293,  293,  301,  293,  293,  302,
      293,  293,  293,  295,  293,  295,  296,  303,  293,  293,
      298,  293,  298,  293,  293,  293,  293,  293,  293,  293,
      299,  299,  299,  299,  299,  299,   25,   25,  293,  293,
      293,  293,  293,  293,  293,  300,  300,  300,  295,  298,

      300,  293,  293,  293,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  293,  293,  301,  293,  293,  302,
      302,  302,  293,  304,  293,  303,  293,  305,  293,  293,
      299,  299,  299,   86,   86,   86,   25,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  304,  304,
      304,  305,  305,  305,  299,  299,   86,   25,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  304,  304,  293,  305,  305,  293,  299,
      299,   86,   25,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      293,  293,  293,  293,  299,  299,   86,   25,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  299,  299,
       86,   25,  300,  300,  299,  299,   86,   25,  300,  299,
      299,   86,   25,  299,  299,   86,   25,  299,  299,  299,
      299,  299,    0,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293
    } ;

static yyconst flex_int16_t yy_nxt[591] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   25,   25,   25,   25,   25,   25,   25,   27,   28,
       29,   30,   31,   32,   33,   32,   34,   32,   35,   36,
       32,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       32,   46,   32,   47,   32,   48,   49,   50,   51,   32,
       52,   32,   32,   53,   32,   54,   55,   57,   58,   59,
       65,   72,   60,   57,   58,   59,   74,   79,   60,   77,
       78,   90,   91,   92,   94,   95,   99,  102,  103,  111,
       80,  100,  105,   75,  108,  125,  106,  109,   99,  166,

      112,  143,   73,  100,  167,  126,   66,   81,   82,   83,
       82,   82,   82,   82,   82,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,  113,   85,  118,  123,   86,
      114,  127,  115,  119,  120,  116,  129,   66,  121,  147,
      130,  124,  132,  133,   68,   85,  128,  137,  138,  139,
      138,  142,  140,   86,   64,  145,   71,  149,   81,   82,
       83,   82,   82,   82,   82,   82,  152,   72,  153,   65,
       73,   82,   82,   82,   82,   82,   82,   82,   82,  151,
       82,   82,   82,   82,   82,   82,   82,  154,  155,  155,
      155,  155,  155,  155,  155,  156,  155,  190,   73,  168,

      138,  142,  155,  155,  170,   66,  171,  169,  138,  142,
      138,  142,  155,  155,  155,  155,  155,  155,  137,  138,
      139,  193,  190,  140,  195,   82,   82,   82,   82,   82,
       82,   82,  152,  191,  153,  155,  197,  293,  293,  193,
      224,  293,  293,  155,  155,  232,  257,  293,  293,  227,
      251,  292,  194,  155,  155,  291,  289,  287,  191,  230,
       82,   82,   82,   82,   82,   82,   82,  293,  293,  271,
      194,  277,  285,  282,  286,  253,  225,  155,  283,  155,
      228,  155,  155,  281,  279,  278,  225,  255,   82,   82,
       82,   82,   82,   82,   82,  269,   82,   82,   82,   82,

       82,   82,   82,  276,  274,  273,  228,  275,   82,   82,
       82,   82,   82,   82,   82,  280,   82,   82,   82,   82,
       82,   82,   82,  284,   82,   82,   82,   82,   82,   82,
       82,  288,   82,   82,   82,   82,   82,   82,   82,  155,
      272,  270,  192,  189,  268,  267,  266,  155,  290,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   56,   56,   56,   56,   56,   64,
      265,  264,   64,   64,   67,  263,   67,   67,   67,   71,
      262,  261,   71,   71,   84,   84,   96,   96,  136,  136,
      136,  136,  136,  141,  141,  141,  141,  141,  146,  146,

      189,  189,  189,  189,  189,  192,  192,  192,  192,  192,
      260,  259,  258,  256,  192,  254,  189,  252,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  231,  229,  226,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  196,   71,   64,  138,  188,
      187,  186,  185,  184,  183,  182,  181,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  165,  164,  163,  162,
      161,  102,  160,  159,  158,  157,  150,  148,  144,   61,

      138,  135,  134,  131,  122,  117,  110,  107,  104,  101,
       98,   97,   93,   89,   88,   76,   70,   69,   63,   62,
       61,  293,    5,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293
    } ;

static yyconst flex_int16_t yy_chk[591] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
       11,   16,    3,    4,    4,    4,   19,   23,    4,   22,
       22,   28,   28,   28,   30,   30,   35,   37,   37,   43,
       23,   35,   39,   19,   41,   49,   39,   41,   51,  110,

       43,   64,   16,   51,  110,   49,   11,   24,   24,   24,
       24,   24,   24,   24,   24,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   44,   24,   46,   48,   24,
       44,   50,   44,   46,   46,   44,   51,   64,   46,   71,
       51,   48,   53,   53,  297,   24,   50,   57,   57,   57,
       60,   60,   57,   24,   66,   66,   73,   73,   81,   81,
       81,   81,   81,   81,   81,   81,   85,  100,   85,   99,
       71,   82,   82,   82,   82,   82,   82,   82,   82,   83,
       83,   83,   83,   83,   83,   83,   83,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,  144,  100,  111,

      140,  140,   86,   86,  112,   99,  112,  111,  141,  141,
      142,  142,   86,   86,   86,   86,   86,   86,  137,  137,
      137,  148,  189,  137,  151,  151,  151,  151,  151,  151,
      151,  151,  152,  144,  152,  155,  156,  190,  190,  192,
      190,  193,  193,  155,  156,  197,  232,  224,  224,  193,
      224,  291,  148,  197,  232,  289,  285,  283,  189,  195,
      195,  195,  195,  195,  195,  195,  195,  227,  227,  257,
      192,  271,  281,  277,  282,  227,  190,  257,  278,  271,
      193,  277,  282,  276,  273,  272,  224,  230,  230,  230,
      230,  230,  230,  230,  230,  255,  255,  255,  255,  255,

      255,  255,  255,  270,  262,  260,  227,  269,  269,  269,
      269,  269,  269,  269,  269,  275,  275,  275,  275,  275,
      275,  275,  275,  280,  280,  280,  280,  280,  280,  280,
      280,  284,  284,  284,  284,  284,  284,  284,  284,  286,
      258,  256,  254,  252,  248,  245,  244,  286,  288,  288,
      288,  288,  288,  288,  288,  288,  290,  290,  290,  290,
      290,  290,  290,  290,  294,  294,  294,  294,  294,  295,
      243,  242,  295,  295,  296,  241,  296,  296,  296,  298,
      240,  239,  298,  298,  299,  299,  300,  300,  301,  301,
      301,  301,  301,  302,  302,  302,  302,  302,  303,  303,

      304,  304,  304,  304,  304,  305,  305,  305,  305,  305,
      238,  235,  233,  231,  229,  228,  226,  225,  223,  221,
      220,  219,  218,  216,  215,  214,  213,  212,  210,  208,
      205,  204,  203,  202,  199,  198,  196,  194,  191,  188,
      187,  186,  184,  183,  182,  181,  179,  178,  177,  176,
      175,  174,  172,  171,  170,  169,  168,  165,  164,  163,
      162,  160,  159,  158,  157,  153,  149,  145,  139,  134,
      133,  132,  131,  130,  129,  128,  127,  124,  123,  122,
      119,  117,  116,  115,  114,  113,  109,  108,  107,  106,
      105,  103,  101,   98,   97,   88,   79,   72,   65,   61,

       59,   55,   54,   52,   47,   45,   42,   40,   38,   36,
       34,   33,   29,   27,   26,   20,   15,   14,   10,    9,
        7,    5,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[88] =
    {   0,
1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "apyc-lexer.l"
/* -*- mode: fundamental; c-file-style: "stroustrup"; indent-tabs-mode: nil -*- */
/* apyc-lexer.l: Flex Lexer */
/* Authors: YOUR NAMES HERE */
#define YY_DECL int yylex_raw() 

static int processBOL (const char* indenting);
/** Nesting level of current source position in '[', '(', and '{'
*  brackets. */
static int bracketDepth;
#line 715 "apyc-lexer.cc"

#define INITIAL 0
#define BOL 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 29 "apyc-lexer.l"


  /* Rules in effect at the start of a line. */

#line 903 "apyc-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 294 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 523 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 33 "apyc-lexer.l"
{   } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "apyc-lexer.l"
{ yyless (yyleng - 1); 
                        BEGIN INITIAL; 
                        int syntax = processBOL (yytext);
                        if (syntax != 0) {
                            return syntax;
                        }
                      }
	YY_BREAK
/* Normal rules. */
/* Normally, throw away comments and whitespace other than newline. */
case 3:
#line 46 "apyc-lexer.l"
case 4:
#line 47 "apyc-lexer.l"
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 47 "apyc-lexer.l"
{ }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 49 "apyc-lexer.l"
{ 
                    if (bracketDepth == 0) {
                        BEGIN BOL; return NEWLINE; 
                    }
                  }
	YY_BREAK
/* Integer literals. */
case 7:
#line 58 "apyc-lexer.l"
case 8:
#line 59 "apyc-lexer.l"
case 9:
#line 60 "apyc-lexer.l"
case 10:
YY_RULE_SETUP
#line 60 "apyc-lexer.l"
{
           yylval.str = new string (yytext);
           return BIGINT;
   }
	YY_BREAK
case 11:
#line 66 "apyc-lexer.l"
case 12:
#line 67 "apyc-lexer.l"
case 13:
YY_RULE_SETUP
#line 67 "apyc-lexer.l"
{
           yylval.str = new string (yytext);
           return INT;
   }
	YY_BREAK
/* Error cases with extraneous characters. */
case 14:
YY_RULE_SETUP
#line 74 "apyc-lexer.l"
{ 
          error (currentLocation (), "trailing garbage in numeral");
    }
	YY_BREAK
/* Strings */
case 15:
/* rule 15 can match eol */
#line 81 "apyc-lexer.l"
case 16:
/* rule 16 can match eol */
#line 82 "apyc-lexer.l"
case 17:
/* rule 17 can match eol */
#line 83 "apyc-lexer.l"
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 83 "apyc-lexer.l"
{
          yylval.str = new string (yytext);
          return STRING;
    }
	YY_BREAK
/* Error cases */
case 19:
/* rule 19 can match eol */
#line 90 "apyc-lexer.l"
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 90 "apyc-lexer.l"
{
          error (currentLocation (), "unterminated string literal");
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
#line 94 "apyc-lexer.l"
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 94 "apyc-lexer.l"
{
          error (currentLocation (), "unterminated long string literal");
}
	YY_BREAK
/* Single-character tokens. */
/* Single-character operators. */
case 23:
YY_RULE_SETUP
#line 102 "apyc-lexer.l"
{ return yytext[0]; }
	YY_BREAK
/* Brackets. */
case 24:
YY_RULE_SETUP
#line 105 "apyc-lexer.l"
{ bracketDepth += 1; return yytext[0]; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 106 "apyc-lexer.l"
{ 
            if (bracketDepth > 0) bracketDepth -= 1; 
            return yytext[0];
          }
	YY_BREAK
/* Other single-character delimiters */
case 26:
YY_RULE_SETUP
#line 112 "apyc-lexer.l"
{ return yytext[0]; }
	YY_BREAK
/* Single-characters tokens not in our subset. */
case 27:
YY_RULE_SETUP
#line 115 "apyc-lexer.l"
{ error (currentLocation (), 
                           "'%s' is not in our subset", yytext);
                  }
	YY_BREAK
/* Multi-character delimiters. */
/* Operators and punctuation. */
case 28:
YY_RULE_SETUP
#line 123 "apyc-lexer.l"
{ return LE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 124 "apyc-lexer.l"
{ return GE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 125 "apyc-lexer.l"
{ return EQ; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 126 "apyc-lexer.l"
{ return NE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 127 "apyc-lexer.l"
{ return COLONCOLON; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 128 "apyc-lexer.l"
{ return FUNCARROW; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 129 "apyc-lexer.l"
{ return '/'; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "apyc-lexer.l"
{ return POW; }
	YY_BREAK
/* Multi-character delimiters not in our subset. */
case 36:
#line 134 "apyc-lexer.l"
case 37:
#line 135 "apyc-lexer.l"
case 38:
#line 136 "apyc-lexer.l"
case 39:
#line 137 "apyc-lexer.l"
case 40:
#line 138 "apyc-lexer.l"
case 41:
#line 139 "apyc-lexer.l"
case 42:
#line 140 "apyc-lexer.l"
case 43:
#line 141 "apyc-lexer.l"
case 44:
#line 142 "apyc-lexer.l"
case 45:
#line 143 "apyc-lexer.l"
case 46:
#line 144 "apyc-lexer.l"
case 47:
YY_RULE_SETUP
#line 144 "apyc-lexer.l"
{ error (currentLocation (), 
                   "'%s' is not in our subset", yytext);
          }
	YY_BREAK
/* Keywords and identifiers. */
case 48:
YY_RULE_SETUP
#line 150 "apyc-lexer.l"
{ return AND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 151 "apyc-lexer.l"
{ return BREAK; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 152 "apyc-lexer.l"
{ return CLASS ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 153 "apyc-lexer.l"
{ return CONTINUE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 154 "apyc-lexer.l"
{ return DEF; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 155 "apyc-lexer.l"
{ return ELIF; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 156 "apyc-lexer.l"
{ return ELSE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 157 "apyc-lexer.l"
{ return FALSE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "apyc-lexer.l"
{ return FOR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 159 "apyc-lexer.l"
{ return IF; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "apyc-lexer.l"
{ return IN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "apyc-lexer.l"
{ return IS; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 162 "apyc-lexer.l"
{ return NATIVE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 163 "apyc-lexer.l"
{ return NONE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 164 "apyc-lexer.l"
{ return NOT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 165 "apyc-lexer.l"
{ return OF; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 166 "apyc-lexer.l"
{ return OR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 167 "apyc-lexer.l"
{ return PASS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 168 "apyc-lexer.l"
{ return PRINT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 169 "apyc-lexer.l"
{ return RETURN; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 170 "apyc-lexer.l"
{ return TRUE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 171 "apyc-lexer.l"
{ return WHILE; }
	YY_BREAK
/* Keywords not in our subset. */
case 70:
#line 176 "apyc-lexer.l"
case 71:
#line 177 "apyc-lexer.l"
case 72:
#line 178 "apyc-lexer.l"
case 73:
#line 179 "apyc-lexer.l"
case 74:
#line 180 "apyc-lexer.l"
case 75:
#line 181 "apyc-lexer.l"
case 76:
#line 182 "apyc-lexer.l"
case 77:
#line 183 "apyc-lexer.l"
case 78:
#line 184 "apyc-lexer.l"
case 79:
#line 185 "apyc-lexer.l"
case 80:
#line 186 "apyc-lexer.l"
case 81:
#line 187 "apyc-lexer.l"
case 82:
#line 188 "apyc-lexer.l"
case 83:
#line 189 "apyc-lexer.l"
case 84:
YY_RULE_SETUP
#line 189 "apyc-lexer.l"
{
            error (currentLocation (), "'%s' is not in our subset", yytext);
          }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "apyc-lexer.l"
{
             yylval.str = new string (yytext);
             return ID;
          }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 199 "apyc-lexer.l"
{
             yylval.str = new string (yytext);
             return TYPE_VAR;
           }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BOL):
#line 204 "apyc-lexer.l"
{ 
             int syntax = processBOL (yytext);
             if (syntax != 0) {
                 return syntax;
             } else {
                 return 0;
             }
           }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 215 "apyc-lexer.l"
ECHO;
	YY_BREAK
#line 1399 "apyc-lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 294 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 294 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 293);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 215 "apyc-lexer.l"



#include <algorithm>

using namespace std;

static vector<string> sourceFileNames;
static vector<int> firstLines;
static int pendingDedents;
static vector<int> indentationLevels;
                   
bool
initLexer (const string& fileName)
{
    FILE* input = fopen (fileName.c_str (), "r");
    if (input == NULL) {
        return false;
    }

    firstLines.push_back (yylineno);
    sourceFileNames.push_back (fileName);
    yyin = input;
    indentationLevels.clear ();
    indentationLevels.push_back (0);
    pendingDedents = 0;
    bracketDepth = 0;
    BEGIN BOL;
    return true;
}

int
yylex ()
{
    if (pendingDedents > 0) {
        pendingDedents -= 1;
        return DEDENT;
    }

    int result = yylex_raw();
    yylloc = yylineno;
    return result;
}

string
currentFileName ()
{
    return sourceFileNames.back ();
}

Location
currentLocation ()
{
    return yylineno;
}

string
locationFileName (Location loc)
{
    if (loc == 0) {
        return "?";
    } else {
        for (size_t i = 1; i < sourceFileNames.size(); i += 1) {
             if (firstLines[i] > loc) {
                 return sourceFileNames[i - 1];
             }
         }
         return sourceFileNames.back ();
    }
}

Location
locationLine (Location loc)
{
    if (loc == 0) {
        return 0;
    } else {
        for (size_t i = 1; i < sourceFileNames.size(); i += 1) {
             if (firstLines[i] > loc) {
                 return loc - firstLines[i - 1] + 1;
             }
         }
         return loc - firstLines.back () + 1;
    }
}

/** Return the number of blanks equivalent to INDENTING, according to
 *  Python's rules. */
static int
blankLen (const char* indenting)
{
    int k;
    k = 0;
    while (*indenting == '\f') {
        indenting += 1;
    }

    for (const char* c = indenting; *c != 0; c += 1) {
        if (*c != '\t') {
            k += 1;
        } else {
            k = (k + 8) & ~7;
        }
     }
     return k;
}

/** Compute the appropriate INDENT or DEDENT tokens indicated by the prefix
 *  INDENTATION, a string of blanks and tabs. Returns the first token to
 *  return---INDENT, DEDENT, or 0 if no token is to be returned because
 *  indentation has not changed from the previous statement.  Saves the
 *  remaining number of DEDENTs to return in subsequent calls to yylex. */
static int
processBOL (const char* indenting)
{
    int indentation = blankLen (indenting);
    if (indentation == indentationLevels.back ()) {
        return 0;
    } else if (indentation > indentationLevels.back ()) {
        indentationLevels.push_back (indentation);
        return INDENT;
    } else {
        vector<int>::iterator match = 
            find (indentationLevels.begin (), indentationLevels.end (),
                  indentation);
        if (match == indentationLevels.end ()) {
            error (currentLocation (), "inconsistent indentation");
            return 0;
        }
        pendingDedents = indentationLevels.end () - match - 2;
        indentationLevels.erase (match + 1, indentationLevels.end ());
        return DEDENT;
    }
}

